<?php

namespace AppBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use FOS\UserBundle\Model\User as BaseUser;
use Symfony\Component\HttpFoundation\File\File;
use Symfony\Component\Validator\Constraints as Assert;
use Vich\UploaderBundle\Mapping\Annotation as Vich;
use Doctrine\Common\Collections\ArrayCollection;


/**
 * @ORM\Entity(repositoryClass="AppBundle\Repository\UserRepository")
 * @ORM\Table(name="fos_user")
 * @ORM\HasLifecycleCallbacks()
 * @Vich\Uploadable
 */
class User extends BaseUser
{
    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;
    
    /**
     * @ORM\ManyToMany(targetEntity="AppBundle\Entity\Group")
     * @ORM\JoinTable(name="fos_user_user_group",
     *      joinColumns={@ORM\JoinColumn(name="user_id", referencedColumnName="id")},
     *      inverseJoinColumns={@ORM\JoinColumn(name="group_id", referencedColumnName="id")}
     * )
     */
    protected $groups;
    
    /**
     * Many Users have Many Sections.
     * @ORM\ManyToMany(targetEntity="AppBundle\Entity\Section", inversedBy="users")
     * @ORM\JoinTable(name="fos_user_section")
     */
    protected $sections;
    
    /**
     * @ORM\OneToMany(targetEntity="project", mappedBy="gip", cascade={"persist", "remove"})
     */
    private $gipprojects;
    
    /**
     * @ORM\OneToMany(targetEntity="StageOrder", mappedBy="UserIsp")
     */
    private $orders;
    
    /**
     * @ORM\Column(type="string", length=255)
     * @var string
     */
    private $avatar;
    
    /**
     * NOTE: This is not a mapped field of entity metadata, just a simple property.
     * @Assert\File(maxSize="400k",mimeTypes={"image/png", "image/jpeg", "image/pjpeg"})
     * @Vich\UploadableField(mapping="avatar_images", fileNameProperty="avatar")
     *
     * @var File
     */
    private $imageFile;

    /**
     * @ORM\Column(type="datetime")
     * @var \DateTime
     */
    private $updatedAt;
    
     /**
     * 
     * @ORM\OneToOne(targetEntity="LegalEntity", mappedBy="user")
     */
    private $legentity;
    
        
    /**
     * @ORM\OneToMany(targetEntity="portfolio", mappedBy="user")
     */
    private $folios;
    
    /**
     * @var string
     *
     * @ORM\Column(name="fio", type="string", length=255)
     */
    private $fio;
    
    /**
     * @var bool
     *
     * @ORM\Column(name="HideName", type="boolean")
     */
    private $hideName;
    
    /**
     * @var string
     *
     * @ORM\Column(name="phone", type="string", length=100, nullable=true)
     */
    private $phone;
    
    /**
     * @var int
     *
     * @ORM\Column(name="rating", type="integer", nullable=true)
     */
    private $rating;

    /**
     * @var string
     *
     * @ORM\Column(name="region", type="string", length=255, nullable=true)
     */
    private $region;
    
     /**
     * @var string
     *
     * @ORM\Column(name="agreement", type="string", length=255, nullable=true)
     */
    private $agreement;

    public function setUpdatedAt($updatedAt)
    {
        $this->updatedAt = $updatedAt;
    }

    public function getUpdatedAt()
    {
        if($this->updatedAt) { 
            return $this->updatedAt;
        }
    }

    public function setImageFile(File $image = null)
    {
        $this->imageFile = $image;

//         VERY IMPORTANT:
//         It is required that at least one field changes if you are using Doctrine,
//         otherwise the event listeners won't be called and the file is lost
        if ($image) {
            // if 'updatedAt' is not defined in your entity, use another property
            $this->updatedAt = new \DateTime('now');
        }
    }

    public function getImageFile()
    {
        return $this->imageFile;
    }

    public function setAvatar($avatar)
    {
        $this->avatar = $avatar;
    }

    public function getavatar()
    {
        return $this->avatar;
    }
    
    public function __construct()
    {
        parent::__construct();
        $this->folios = new ArrayCollection();
        $this->sections = new ArrayCollection();
        $this->gipprojects = new ArrayCollection();
        $this->orders = new ArrayCollection();
    }

    /**
     * Set legentity
     *
     * @param \AppBundle\Entity\LegalEntity $legentity
     *
     * @return User
     */
    public function setLegentity(\AppBundle\Entity\LegalEntity $legentity = null)
    {
        $this->legentity = $legentity;

        return $this;
    }

    /**
     * Get legentity
     *
     * @return \AppBundle\Entity\LegalEntity
     */
    public function getLegentity()
    {
        return $this->legentity;
    }

    
    /**
     * Add folio
     *
     * @param \AppBundle\Entity\portfolio $folio
     *
     * @return User
     */
    public function addFolio(\AppBundle\Entity\portfolio $folio)
    {
        $this->folios[] = $folio;

        return $this;
    }

    /**
     * Remove folio
     *
     * @param \AppBundle\Entity\portfolio $folio
     */
    public function removeFolio(\AppBundle\Entity\portfolio $folio)
    {
        $this->folios->removeElement($folio);
    }

    /**
     * Get folios
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getFolios()
    {
        return $this->folios;
    }

    /**
     * Set fio
     *
     * @param string $fio
     *
     * @return User
     */
    public function setFio($fio)
    {
        $this->fio = $fio;

        return $this;
    }

    /**
     * Get fio
     *
     * @return string
     */
    public function getFio()
    {
        return $this->fio;
    }

    /**
     * Set hideName
     *
     * @param boolean $hideName
     *
     * @return User
     */
    public function setHideName($hideName)
    {
        $this->hideName = $hideName;

        return $this;
    }

    /**
     * Get hideName
     *
     * @return boolean
     */
    public function getHideName()
    {
        return $this->hideName;
    }

    /**
     * Set phone
     *
     * @param string $phone
     *
     * @return User
     */
    public function setPhone($phone)
    {
        $this->phone = $phone;

        return $this;
    }

    /**
     * Get phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->phone;
    }

    /**
     * Set rating
     *
     * @param integer $rating
     *
     * @return User
     */
    public function setRating($rating)
    {
        $this->rating = $rating;

        return $this;
    }

    /**
     * Get rating
     *
     * @return integer
     */
    public function getRating()
    {
        return $this->rating;
    }

    /**
     * Set region
     *
     * @param string $region
     *
     * @return User
     */
    public function setRegion($region)
    {
        $this->region = $region;

        return $this;
    }

    /**
     * Get region
     *
     * @return string
     */
    public function getRegion()
    {
        return $this->region;
    }

    /**
     * Set agreement
     *
     * @param string $agreement
     *
     * @return User
     */
    public function setAgreement($agreement)
    {
        $this->agreement = $agreement;

        return $this;
    }

    /**
     * Get agreement
     *
     * @return string
     */
    public function getAgreement()
    {
        return $this->agreement;
    }

    /**
     * Add section
     *
     * @param \AppBundle\Entity\Section $section
     *
     * @return User
     */
    public function addSection(\AppBundle\Entity\Section $section)
    {
        $this->sections[] = $section;

        return $this;
    }

    /**
     * Remove section
     *
     * @param \AppBundle\Entity\Section $section
     */
    public function removeSection(\AppBundle\Entity\Section $section)
    {
        $this->sections->removeElement($section);
    }

    /**
     * Get sections
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getSections()
    {
        return $this->sections;
    }

    /**
     * Add gipproject
     *
     * @param \AppBundle\Entity\project $gipproject
     *
     * @return User
     */
    public function addGipproject(\AppBundle\Entity\project $gipproject)
    {
        $this->gipprojects[] = $gipproject;

        return $this;
    }

    /**
     * Remove gipproject
     *
     * @param \AppBundle\Entity\project $gipproject
     */
    public function removeGipproject(\AppBundle\Entity\project $gipproject)
    {
        $this->gipprojects->removeElement($gipproject);
    }

    /**
     * Get gipprojects
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getGipprojects()
    {
        return $this->gipprojects;
    }

    /**
     * Add order
     *
     * @param \AppBundle\Entity\StageOrder $order
     *
     * @return User
     */
    public function addOrder(\AppBundle\Entity\StageOrder $order)
    {
        $this->orders[] = $order;

        return $this;
    }

    /**
     * Remove order
     *
     * @param \AppBundle\Entity\StageOrder $order
     */
    public function removeOrder(\AppBundle\Entity\StageOrder $order)
    {
        $this->orders->removeElement($order);
    }

    /**
     * Get orders
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getOrders()
    {
        return $this->orders;
    }
    
    public function __toString() 
     {
         return $this->getUsername();
     }
}
