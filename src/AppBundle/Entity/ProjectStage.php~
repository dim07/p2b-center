<?php

namespace AppBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * ProjectStage
 *
 * @ORM\Table(name="project_stage")
 * @ORM\Entity(repositoryClass="AppBundle\Repository\ProjectStageRepository")
 */
class ProjectStage
{
    /**
     * @var int
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var int
     *
     * @ORM\Column(name="id_project", type="integer")
     */
    private $idProject;
    
    /**
     * @ORM\ManyToOne(targetEntity="project", inversedBy="stages")
     * @ORM\JoinColumn(name="id_project", referencedColumnName="id")
     */
    private $project;

    /** Для упорядочивания этапов
     * @var int
     *
     * @ORM\Column(name="num", type="integer", nullable=true)
     */
    private $num;
    
    /**
     * @var string
     *
     * @ORM\Column(name="name", type="string", length=255)
     */
    private $name;


    /**
     * @var \DateTime
     *
     * @ORM\Column(name="EndDate", type="datetime", nullable=true)
     * @Assert\DateTime()
     */
    private $endDate;
    
    /**
     * @var \DateTime
     *
     * @ORM\Column(name="FactEndDate", type="datetime", nullable=true)
     * @Assert\DateTime()
     */
    private $FactEndDate;

    /**
     * @var float
     *
     * @ORM\Column(name="cost", type="float")
     */
    private $cost;

    /**
     * @var string
     *
     * @ORM\Column(name="info", type="text", nullable=true)
     */
    private $info;
    
     /**
     * @ORM\OneToMany(targetEntity="StageOrder", mappedBy="stage")
     * @ORM\OrderBy({"isLegalEntity" = "DESC"})
     */
    private $orders;
    
    public function __construct()
    {
        $this->endDate = new \DateTime();
        $this->orders = new ArrayCollection();
    }


    /**
     * Get id
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set idProject
     *
     * @param integer $idProject
     *
     * @return ProjectStage
     */
    public function setIdProject($idProject)
    {
        $this->idProject = $idProject;

        return $this;
    }

    /**
     * Get idProject
     *
     * @return int
     */
    public function getIdProject()
    {
        return $this->idProject;
    }
    
    /**
     * Set num
     *
     * @param integer $num
     *
     * @return ProjectStage
     */
    public function setNum($num)
    {
        $this->num = $num;

        return $this;
    }

    /**
     * Get num
     *
     * @return int
     */
    public function getNum()
    {
        return $this->num;
    }

    /**
     * Set name
     *
     * @param string $name
     *
     * @return ProjectStage
     */
    public function setName($name)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Get name
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Set endDate
     *
     * @param \DateTime $endDate
     *
     * @return ProjectStage
     */
    public function setEndDate($endDate)
    {
        $this->endDate = $endDate;

        return $this;
    }

    /**
     * Get endDate
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->endDate;
    }
    
    /**
     * Set FactEndDate
     *
     * @param \DateTime $FactEndDate
     *
     * @return ProjectStage
     */
    public function setFactEndDate($FactEndDate)
    {
        $this->FactEndDate = $FactEndDate;

        return $this;
    }

    /**
     * Get FactEndDate
     *
     * @return \DateTime
     */
    public function getFactEndDate()
    {
        return $this->FactEndDate;
    }

    /**
     * Set cost
     *
     * @param float $cost
     *
     * @return ProjectStage
     */
    public function setCost($cost)
    {
        $this->cost = $cost;

        return $this;
    }

    /**
     * Get cost
     *
     * @return float
     */
    public function getCost()
    {
        return ($this->cost ? $this->cost : 0);
    }

    /**
     * Set info
     *
     * @param string $info
     *
     * @return ProjectStage
     */
    public function setInfo($info)
    {
        $this->info = $info;

        return $this;
    }

    /**
     * Get info
     *
     * @return string
     */
    public function getInfo()
    {
        return $this->info;
    }

    /**
     * Set project
     *
     * @param \AppBundle\Entity\project $project
     *
     * @return ProjectStage
     */
    public function setProject(\AppBundle\Entity\project $project = null)
    {
        $this->project = $project;

        return $this;
    }

    /**
     * Get project
     *
     * @return \AppBundle\Entity\project
     */
    public function getProject()
    {
        return $this->project;
    }

    /**
     * Add order
     *
     * @param \AppBundle\Entity\StageOrder $order
     *
     * @return ProjectStage
     */
    public function addOrder(\AppBundle\Entity\StageOrder $order)
    {
        $this->orders[] = $order;

        return $this;
    }

    /**
     * Remove order
     *
     * @param \AppBundle\Entity\StageOrder $order
     */
    public function removeOrder(\AppBundle\Entity\StageOrder $order)
    {
        $this->orders->removeElement($order);
    }

    /**
     * Get orders
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getOrders()
    {
        return $this->orders;
    }
    
    public function __toString() 
    {
        return $this->getName();
    }
    
    private $datas;
    public function getDatas()
    {
        return $this->datas;
    }
    
    public function setDatas($datas)
    {
        $this->datas = $datas;
        return $this;
    }
    
    public function getSubCost()
    {
        $cost0 = 0;
        foreach ($this->orders as $order) {
            if ($order->getIsLegalEntity()) {
                $cost0 += $order->getCost();
            }    
        }
        return $cost0;
    }
    
    public function getSubFactCost()
    {
        $cost0 = 0;
        foreach ($this->orders as $order) {
            if ($order->getIsLegalEntity()) {
                foreach ($order->getPays() as $pay) {
                    if ($pay->getChargDate() and $pay->getFactPay()) {
                        $cost0 += $pay->getFactPay();
                    }    
                }
            }    
        }
        return $cost0;
    }
    
    public function getIspCost()
    {
        $cost0 = 0;
//        foreach ($this->orders as $order) {
//            if (!($order->getIsLegalEntity()==1)) {
//                $cost0 += $order->getCost();
//            }    
//        }
        foreach ($this->orders as $order) {
            if (!$order->getIsLegalEntity()) {
                $cost0 += $order->getCost();
            }    
        }
        
        
        return $cost0;
    }
    
    public function getIspPays()
    {
        $cost0 = 0;
        foreach ($this->orders as $order) {
                $cost0 += $order->getIspPays();
            }    
        return $cost0;
    }
}
